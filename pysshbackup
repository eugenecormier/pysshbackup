#!/usr/bin/env python2

##############################################
## IMPORTS
##############################################

import os
from subprocess import call
import time
# for ssh connections
import paramiko
# for xml file parsing
import xml.etree.ElementTree as ET
# cli args
import argparse


##############################################
## INITIALIZE REQUIRED COMPONENTS
##############################################

settings = ET.parse(os.path.expanduser('~/.pysshbackup/defaults.xml'))
folders = settings.findall('.//folder')
files = settings.findall('.//file')
exceptions = settings.findall('.//exception')
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(settings.findtext('sshserver'), port=int(settings.findtext('sshport')), username=settings.findtext('sshuser'), password=settings.findtext('sshpass'))
# cli args
cliargs = argparse.ArgumentParser(description='Random Music Theory Test Generator.', usage='%(prog)s [options]')
cliargs.add_argument( '-p' , '--partial-cli' , help='run partial backup (automated)' , action='store_true' )
args = cliargs.parse_args()

##############################################
## DEFINITIONS
##############################################

# COMMON FUNCTIONS
def titleScreen():
  os.system('clear')
  print ('\npysshbackup v2.1')
  print ('----------------\n')

def exceptionsVariable(exceptions):
  string = ''
  for i in exceptions:
    string = string + '--exclude "' + i.text + '" '
  return string

def syncFileFolders(files,folders,backupname,excludes):
  # rsync code for files
  for i in files:
    print ('\nBacking up: ' + i.text + '\n')
    call('rsync -aHAP --delete ' + excludes + ' -e \'ssh -p ' + settings.findtext('sshport') + '\' '  + i.text + ' ' + settings.findtext('sshuser') + '@' + settings.findtext('sshserver') + ':' + settings.findtext('backupfolder') + backupname, shell=True)
    print ('\nDone.\n')
  # rsync code for folders
  for i in folders:
    print ('\nBacking up: ' + i.text + '\n')
    call('rsync -aHAP --delete ' + excludes + ' -e \'ssh -p ' + settings.findtext(    'sshport') + '\' ' + i.text + ' ' + settings.findtext('sshuser') + '@' + settings.findtext('sshserver') + ':' + settings.findtext('backupfolder') + backupname + i.text, shell=True)
    print ('\nDone.\n')

# HELP
def helpMenu():
  titleScreen()
  print ('command action\n')
  print ('l  list backups')
  print ('f  create a new full backup (this must be done the first time)')
  print ('p  create a partial backup')
  print ('r  resume an interrupted sync')
  print ('d  delete backup')
  print ('h  help')
  print ('q  quit\n')

# PARTIAL
def partialBackup(files,folders):
  titleScreen()
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  backupslist = [ ]
  for i in stdout:
    backupslist.append(i)
  partialname = raw_input('What would you like to call the new partial backup? ')
  print ('Hardlinking from: ' + backupslist[-1].rstrip() + ' to: ' + partialname )
  stdin, stdout, stderr = ssh.exec_command(str('cp -al ' + settings.findtext('backupfolder') + backupslist[-1].rstrip() + ' ' + settings.findtext('backupfolder') + partialname))
  # this is needed to wait for copy process to finish before rsyncing vvv
  print stdout.readlines()
  syncFileFolders(files,folders,partialname,exceptionsVariable(exceptions))

# CLI PARTIAL
def clipartialBackup(files,folders):
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  backupslist = [ ]
  for i in stdout:
    backupslist.append(i)
  print ('Hardlinking from: ' + backupslist[-1].rstrip() + ' to: ' + time.strftime('%Y-%m-%d') )
  stdin, stdout, stderr = ssh.exec_command(str('cp -al ' + settings.findtext('backupfolder') + backupslist[-1].rstrip() + ' ' + settings.findtext('backupfolder') + time.strftime('%Y-%m-%d') ))
  # this is needed to wait for copy process to finish before rsyncing vvv
  print stdout.readlines()
  syncFileFolders(files,folders,time.strftime('%Y-%m-%d'),exceptionsVariable(exceptions))

# FULL
def fullBackup(files,folders):
  titleScreen()
  fullname = raw_input('What would you like to call the new full backup? ')
  # this makes the directory vvv
  stdin, stdout, stderr = ssh.exec_command(str('mkdir -p ' + settings.findtext('backupfolder') + fullname ))
  # this is needed to wait for mkdir process to finish before rsyncing vvv
  print stdout.readlines()
  for i in folders:
    print ('\nCreating folder: ' + i.text + '\n')
    stdin, stdout, stderr = ssh.exec_command(str('mkdir -p ' + settings.findtext('backupfolder') + fullname + i.text ))
    # this is needed to wait for mkdir process to finish before rsyncing vvv
    print stdout.readlines()
  syncFileFolders(files,folders,fullname,exceptionsVariable(exceptions))

# DELETE
def deleteBackup():
  listBackup()
  deletenumber = raw_input('Which backup do you want to delete[#]? ')
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  deletelist = []
  for object in stdout:
    deletelist.append(object)
  deletelistname = deletelist[ int(deletenumber) - 1 ]
  yesno = raw_input('Are you sure you want to delete: ' + deletenumber + ' ' + deletelistname.rstrip() + '? (Y/n) ')
  if (yesno == 'y' or yesno == 'Y' or yesno == 'yes' or yesno == 'Yes' or yesno == ''):
    stdin, stdout, stderr = ssh.exec_command('rm -r ' + settings.findtext('backupfolder') + deletelist[ int(deletenumber) - 1 ] )
    # this is needed to wait for mkdir process to finish before rsyncing vvv
    print stdout.readlines()

# RESUME
def resumeBackup(files,folders):
  listBackup()
  resumenumber = raw_input('Which backup would you like to resume[#]? ')
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  resumelist = []
  for object in stdout:
    resumelist.append(object)
  resumelistname = resumelist[ int(resumenumber) - 1 ]
  yesno = raw_input('Are you sure you want to resume: ' + resumelistname.rstrip() + '? (Y/n) ')
  if (yesno == 'y' or yesno == 'Y' or yesno == 'yes' or yesno == 'Yes' or yesno == ''):
    createname = resumelistname.rstrip()
    syncFileFolders(files,folders,createname,exceptionsVariable(exceptions))

# LIST
def listBackup():
  titleScreen()
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  for index,object in enumerate(stdout):
    print (str(index+1) + '   ' + object.rstrip())
  print ('')

##############################################
## MAIN FUNCTION
##############################################

def main():
  if args.partial_cli:
    clipartialBackup(files,folders)
  else:
    loop = True
    titleScreen()
    while loop == True:
      response = raw_input('Command (h for help): ')
      if response == 'h':
        helpMenu()
      elif response == 'p':
        partialBackup(files,folders)
      elif response == 'f':
        fullBackup(files,folders)
      elif response == 'd':
        deleteBackup()
      elif response == 'r':
        resumeBackup(files,folders)
      elif response == 'l':
        listBackup()
      elif response == 'q':
        os.system('clear')
        ssh.close()
        loop = False
      else:
        os.system('clear')
        print ('There is no \'{0}\' option, use \'h\' for help').format(response)

main()

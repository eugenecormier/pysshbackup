#!/usr/bin/env python3

##############################################
## IMPORTS
##############################################

import os
from subprocess import call
import time
# for ssh connections
import paramiko
# for xml file parsing
import xml.etree.ElementTree as ET
# cli args
import argparse


##############################################
## INITIALIZE REQUIRED COMPONENTS
##############################################

settings = ET.parse(os.path.expanduser('~/.pysshbackup/defaults.xml'))
folders = settings.findall('.//folder')
files = settings.findall('.//file')
exceptions = settings.findall('.//exception')
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(settings.findtext('sshserver'), port=int(settings.findtext('sshport')), username=settings.findtext('sshuser'), password=settings.findtext('sshpass'))
# cli args
cliargs = argparse.ArgumentParser(description='Python3 automatated or manual incremental backup script.', usage='%(prog)s [options]')
cliargs.add_argument( '-p' , '--partial-cli' , help='run partial backup (automated)' , action='store_true' )
args = cliargs.parse_args()

##############################################
## DEFINITIONS
##############################################

# COMMON FUNCTIONS
def titleScreen():
  os.system('clear')
  print ('\npysshbackup v3')
  print ('----------------\n')

def exceptionsVariable(exceptions):
  string = ''
  for i in exceptions:
    string = string + '--exclude "' + i.text + '" '
  return string

def syncFileFolders(files,folders,backupname,excludes):
  # rsync code for files
  for i in files:
    print ('\nBacking up: ' + i.text + '\n')
    call('rsync -aHAP --delete ' + excludes + ' -e \'ssh -p ' + settings.findtext('sshport') + '\' '  + i.text + ' ' + settings.findtext('sshuser') + '@' + settings.findtext('sshserver') + ':' + settings.findtext('backupfolder') + backupname, shell=True)
    print ('\nDone.\n')
  # rsync code for folders
  for i in folders:
    print ('\nBacking up: ' + i.text + '\n')
    call('rsync -aHAP --delete ' + excludes + ' -e \'ssh -p ' + settings.findtext('sshport') + '\' ' + i.text + ' ' + settings.findtext('sshuser') + '@' + settings.findtext('sshserver') + ':' + settings.findtext('backupfolder') + backupname + i.text, shell=True)
    print ('\nDone.\n')

# HELP
def helpMenu():
  titleScreen()
  print ('command action\n')
  print ('l  list backups')
  print ('f  create a new full backup (this must be done the first time)')
  print ('p  create a partial backup')
  print ('r  resume an interrupted sync')
  print ('d  delete backup')
  print ('h  help')
  print ('q  quit\n')

# PARTIAL
def partialBackup(files,folders):
  titleScreen()
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  backupslist = [ ]
  for i in stdout:
    backupslist.append(i)
  partialname = input('What would you like to call the new partial backup? ')
  print ('Hardlinking from: ' + backupslist[-1].rstrip() + ' to: ' + partialname )
  stdin, stdout, stderr = ssh.exec_command(str('cp -al ' + settings.findtext('backupfolder') + backupslist[-1].rstrip() + ' ' + settings.findtext('backupfolder') + partialname))
  # this is needed to wait for copy process to finish before rsyncing vvv
  print(stdout.readlines())
  syncFileFolders(files,folders,partialname,exceptionsVariable(exceptions))

# CLI PARTIAL
def clipartialBackup(files,folders):
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  backupslist = [ ]
  for i in stdout:
    backupslist.append(i)
  print ('Hardlinking from: ' + backupslist[-1].rstrip() + ' to: ' + time.strftime('%Y-%m-%d') )
  stdin, stdout, stderr = ssh.exec_command(str('cp -al ' + settings.findtext('backupfolder') + backupslist[-1].rstrip() + ' ' + settings.findtext('backupfolder') + time.strftime('%Y-%m-%d') ))
  # this is needed to wait for copy process to finish before rsyncing vvv
  print(stdout.readlines())
  syncFileFolders(files,folders,time.strftime('%Y-%m-%d'),exceptionsVariable(exceptions))
  # New auto-delete function
  currentDate = getCurrentDate()
  currentBackups = listbackups()
  monthlyDeleteList = createMonthlyCleanList(currentDate,currentBackups)
  deleteStuff(monthlyDeleteList)
  yearlyDeleteList = createYearlyCleanList(currentDate)
  deleteStuff(yearlyDeleteList)
  
# FULL
def fullBackup(files,folders):
  titleScreen()
  fullname = input('What would you like to call the new full backup? ')
  # this makes the directory vvv
  stdin, stdout, stderr = ssh.exec_command(str('mkdir -p ' + settings.findtext('backupfolder') + fullname ))
  # this is needed to wait for mkdir process to finish before rsyncing vvv
  print(stdout.readlines())
  for i in folders:
    print ('\nCreating folder: ' + i.text + '\n')
    stdin, stdout, stderr = ssh.exec_command(str('mkdir -p ' + settings.findtext('backupfolder') + fullname + i.text ))
    # this is needed to wait for mkdir process to finish before rsyncing vvv
    print(stdout.readlines())
  syncFileFolders(files,folders,fullname,exceptionsVariable(exceptions))

# DELETE
def deleteBackup():
  listBackup()
  deletenumber = input('Which backup do you want to delete[#]? ')
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  deletelist = []
  for object in stdout:
    deletelist.append(object)
  deletelistname = deletelist[ int(deletenumber) - 1 ]
  yesno = input('Are you sure you want to delete: ' + deletenumber + ' ' + deletelistname.rstrip() + '? (Y/n) ')
  if (yesno == 'y' or yesno == 'Y' or yesno == 'yes' or yesno == 'Yes' or yesno == ''):
    ### I updated the following Feb 2023 to use the faster rsync deletion meth.
    # rsync empty the dir
    stdin, stdout, stderr = ssh.exec_command('rsync -a --delete /var/empty/ ' + settings.findtext('backupfolder') + deletelist[ int(deletenumber) - 1 ] )
    print(stdout.readlines())
    # remove empty dir
    stdin, stdout, stderr = ssh.exec_command('rmdir ' + settings.findtext('backupfolder') + deletelist[ int(deletenumber) - 1 ] )
    print(stdout.readlines())
    # play a completion sound
    print('\a')

# RESUME
def resumeBackup(files,folders):
  listBackup()
  resumenumber = input('Which backup would you like to resume[#]? ')
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  resumelist = []
  for object in stdout:
    resumelist.append(object)
  resumelistname = resumelist[ int(resumenumber) - 1 ]
  yesno = input('Are you sure you want to resume: ' + resumelistname.rstrip() + '? (Y/n) ')
  if (yesno == 'y' or yesno == 'Y' or yesno == 'yes' or yesno == 'Yes' or yesno == ''):
    createname = resumelistname.rstrip()
    syncFileFolders(files,folders,createname,exceptionsVariable(exceptions))

# LIST
def listBackup():
  titleScreen()
  stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
  for index,object in enumerate(stdout):
    print (str(index+1) + '   ' + object.rstrip())
  print ('')

##### THIS NEXT SECTION IS FOR THE NEW AUTO-DELETE FUNCTION TO CLI PARTIALS #####
# this code does the following:
#   1) deletes backups over a year old
#   2) keeps the last 10 days of the most recent backups
#   3) keeps one day a month for the last 12 months

def getCurrentDate():
    currentDate = time.strftime('%Y-%m-%d')
    return currentDate

def listbackups():
    stdin, stdout, stderr = ssh.exec_command('ls ' + settings.findtext('backupfolder'))
    backupslist = []
    for index,object in enumerate(stdout):
        backupslist.append(object.rstrip())
    return backupslist

def createMonthlyCleanList(currentdate,backups):
    ### keep the last 10 backups
    del backups[-10:]
    ### remove all but the first backup of each month
    # get a list of all years included in backups
    yearlist = []
    for year in backups:
    	yearlist.append(year[0:4])
    # remove duplicates from list
    yearlist = list(dict.fromkeys(yearlist))
    # get a list of all months for each year
    for year in yearlist:
    	monthlist = []
    	for i in backups:
    		if i[0:4] == year:
    			monthlist.append(i[5:7])
    	# remove duplicates
    	monthlist = list(dict.fromkeys(monthlist))
       	# match year-month and create a list
    	for i in monthlist:
    		matches = [match for match in backups if year + '-' + i in match]
    		listlen = len(matches)
    		del matches[1:listlen]
    		for x in matches:
    			backups.remove(x)
    return(backups)

def createYearlyCleanList(currentDate):
    ### remove all backups over one year old
    # get new dir listing
    currentBackups = listbackups()
    
    listindex = len(currentBackups)
    for i in reversed(currentBackups):
        if int(i[0:4]) < int(currentDate[0:4]) - 1:
            del currentBackups[listindex:]
            break
        listindex = listindex - 1    
    else:
    	currentBackups = []
    return currentBackups

def deleteStuff(List):
    for backup in List:
        print('Deleting: ' + backup + '...')
        stdin, stdout, stderr = ssh.exec_command('rsync -a --delete /var/empty/ ' + settings.findtext('backupfolder') + backup)
        print(stdout.readlines())
        stdin, stdout, stderr = ssh.exec_command('rmdir ' + settings.findtext('backupfolder') + backup)
        print(stdout.readlines())


##############################################
## MAIN FUNCTION
##############################################

def main():
  if args.partial_cli:
    clipartialBackup(files,folders)
  else:
    loop = True
    titleScreen()
    while loop == True:
      response = input('Command (h for help): ')
      if response == 'h':
        helpMenu()
      elif response == 'p':
        partialBackup(files,folders)
      elif response == 'f':
        fullBackup(files,folders)
      elif response == 'd':
        deleteBackup()
      elif response == 'r':
        resumeBackup(files,folders)
      elif response == 'l':
        listBackup()
      elif response == 'q':
        os.system('clear')
        ssh.close()
        loop = False
      else:
        os.system('clear')
        print ('There is no \'{0}\' option, use \'h\' for help').format(response)

main()
